script, keypressMovement, begin
	variable (x,y, who, cur map, var)
	if (movementAllowed==false) then (exitScript)
	#checks to see if player should stop for npc event
	cur map := current map
	x := heroX
	y := heroY
	if (npc at spot (x,y)) then (suspendMovement, usenpcatspot(), specwait, resumemovement)

	if(hero is walking(0)==false && hero is walking(1)==false && hero is walking(2)==false && hero is walking(3)==false) then (
		set hero speed(me, 1)
		#b button, dashing
		if (keyIsPressedB) then (
			set hero speed(me, 2)
		)
	)

	#a button,  use stuff
	if (newkeypressA && hero is walking(me) == false) then (
		x := hero X + dirX(hero direction)
		y := hero Y + dirY(hero direction)
		if (NPC at spot (x,y)) then (
			if (activatableNPC(NPC at spot (x,y))) then (
				usenpcatspot
				exit script
			)
		)
		exit script
	)

	if (newkeypressX) then (
		#mm()
		opensettingsmenu()
		exitscript
	)
	#arrow keys, move character

	if (hero is walking(me) == false) then (
		if (keypress(up key)) then (
			x := heroX(me)
			y := heroY(me)--1
			if (NPC at spot (x,y)) then (
				who := npc at spot (x,y)
				if (activatableNPC(who) && read NPC (who, NPCstat:activation)==NPCactivation:touch) then (
					set hero direction (me, up)
					usenpcatspot
				)
				exit script
			)
		)
		if (keypress(down key)) then (
			x := heroX(me)
			y := heroY(me)+1
			if (NPC at spot (x,y)) then (
				who := npc at spot (x,y)
				if (activatableNPC(who) && read NPC (who, NPCstat:activation)==NPCactivation:touch) then (
					set hero direction (me, down)
					usenpcatspot
				)
				exit script
			)
		)
		if (keypress(left key)) then (
			x := heroX(me)--1
			y := heroY(me)
			if (NPC at spot (x,y)) then (
				who := npc at spot (x,y)
				if (activatableNPC(who) && read NPC (who, NPCstat:activation)==NPCactivation:touch) then (
					set hero direction (me, left)
					usenpcatspot
				)
				exit script
			)
		)
		if (keypress(right key)) then (
			x := heroX(me)+1
			y := heroY(me)
			if (NPC at spot (x,y)) then (
				who := npc at spot (x,y)
				if (activatableNPC(who) && read NPC (who, NPCstat:activation)==NPCactivation:touch) then (
					set hero direction (me, right)
					usenpcatspot
				)
				exit script
			)
		)
	)

	if (hero is walking(me) == false) then (
		if (key is pressed(up key)) then (walk hero(me, up, 1), exit script)
		if (key is pressed(left key)) then (walk hero(me, left, 1), exit script)
		if (key is pressed(down key)) then (walk hero(me, down, 1), exit script)
		if (key is pressed(right key)) then (walk hero(me, right, 1), exit script)
	)

	subscript, usenpcatspot, begin
		who := (NPC at spot(x,y))
		suspendMovement
		if (NPC is walking (who) == false) then (
			if (read NPC (who,NPCstat:when activated) <> NPCwhenactivated:donotfaceplayer) then (
				switch(hero direction(me)) do, (
					case (up) do (set NPC direction (who, down))
					case (down) do (set NPC direction (who, up))
					case (left) do (set NPC direction (who, right))
					case (right) do (set NPC direction (who, left))
				)
			)
		)
		use npc (who)
		resumeMovement
	end
end

script, menukeypress, begin
	variable (var, s)
	if (keypressA) then (if (topmenu) then (playsound(10, false, true),use menu item(selected menu item)), exit script)

	if (get menu bit(topmenu, menubit:no close) <> true) then (
		if (keypressX && get menu ID(topmenu)==1) then (
			var := topmenu
			if (get menu cancel button menu(topmenu)<>-1) then (
				open menu (get menu cancel button menu(topmenu))
			)

			s := get menu on close script(var)
			run script by id(s)
			close menu(var)
			exit script
		)

		if (keypressB) then (
			var := topmenu
			if (get menu cancel button menu(topmenu)<>-1) then (
				open menu (get menu cancel button menu(topmenu))
			)

			s := get menu on close script(var)
			run script by id(s)
			close menu(var)
			exit script
		)
	)
	if (keypress(right key)) then (
		if (find menu ID(1)) then(
			if (selected menu item(top menu)==menu item by true slot(top menu, 1)) then (
				set music volume (getmusicvolume+255/50)
				var:musicVol := getmusicvolume
				$1="Music "
				append number (1, musicpercent)
				$1+"%"
				set menu item caption(menu item by true slot(top menu, 1), 1)
			)
			if (selected menu item(top menu)==menu item by true slot(top menu, 2)) then (
				setGlobalSoundVolume (getGlobalSoundVolume()+255/50)
				var:soundVol := getGlobalSoundVolume()
				$1="Sound "
				append number (1, soundpercent)
				$1+"%"
				set menu item caption(menu item by true slot(top menu, 2), 1)
			)
		)
	)

	if (keypress(left key)) then (
		if (find menu ID(1)) then(

			if (selected menu item(top menu)==menu item by true slot(top menu, 1)) then (
				set music volume (getmusicvolume--255/50)
				var:musicVol := getmusicvolume
				$1="Music "
				append number (1, musicpercent)
				$1+"%"
				set menu item caption(menu item by true slot(top menu, 1), 1)
			)
			if (selected menu item(top menu)==menu item by true slot(top menu, 2)) then (
				setGlobalSoundVolume (getGlobalSoundVolume()--255/50)
				var:soundVol := getGlobalSoundVolume()
				$1="Sound "
				append number (1, soundpercent)
				$1+"%"
				set menu item caption(menu item by true slot(top menu, 2), 1)
			)
		)
	)

	if (keypress(up key)) then (
		if (selected menu item(top menu) <> first menu item(top menu)) then (
			select menu item(previous menu item(selected menu item(topmenu)))
		) else if (selected menu item(top menu) == first menu item(top menu)) then (
			select menu item(last menu item(top menu))
		)
	)

	if (keypress(down key)) then (
		if (selected menu item(top menu) <> last menu item(top menu)) then (
			select menu item(next menu item(selected menu item(topmenu)))
		) else if (selected menu item(top menu) == last menu item(top menu)) then (
			select menu item(first menu item(top menu))
		)
	)
end

script, keypressBattle, begin
	variable ()

	if (battle:bkey == bkey:action) then (
		keybattlemenu
	)else if (battle:bkey  == bkey:targatk) then (
		keyseltargetatk
	)
end

script, keybattlemenu, begin
	variable (sli, var, var2, sel, ext)

	sli := lookupslice (sli:actionmenu)
	sel := getSliceExtra (sli, 0)

	if (keypressA) then (
		switch (sel) do (
			case (battlemenu:attack) do (
				suspendMovement
				battle:bkey := bkey:targatk
			)
			case (battlemenu:run) do (
				suspendMovement
				battle:bkey := bkey:run
				battle:win := 1
			)
		)
		exitscript
	)

	if (keypress(up key)) then (
		sli := slice child (lookupslice (sli:actionmenu), sel)
		setSliceLookup(sli, 0)
		setTextColor(sli, ui:menuitem)

		if (sel > 1) then (sel -= 1) else (sel := (child count(lookupslice (sli:actionmenu)))--1)

		setSliceExtra (lookupslice (sli:actionmenu), 0, sel)
		sli := slice child (lookupslice (sli:actionmenu), sel)
		setSliceLookup(sli, sli:selected text)
		exit script
	)
	if(keypress(down key)) then (
		sli := slice child (lookupslice (sli:actionmenu), sel)
		setSliceLookup(sli, 0)
		setTextColor(sli, ui:menuitem)

		if (sel <(child count(lookupslice (sli:actionmenu)))--1) then (sel += 1) else (sel := 1)
		
		setSliceExtra(lookupslice (sli:actionmenu), 0, sel)
		sli := slice child (lookupslice (sli:actionmenu), sel)
		setSliceLookup(sli, sli:selected text)
		exit script
	)
end

script, keyseltargetatk, begin
	variable (sli, var, var2, sel)

	sli := lookupslice (sli:enemygrid)
	sel := getSliceExtra (sli, 0)

	if (keypressA) then (
		suspendMovement
		setSliceVisible (firstChild (first child (slice child (lookupSlice (sli:enemygrid), sel))), false)
		addattack (attack:normal, battle:turn, sel+4)
		exit script
	)
	if (keypressB) then (
		suspendMovement
		setSliceVisible (firstChild (first child (slice child (lookupSlice (sli:enemygrid), sel))), false)
		battle:bkey := bkey:action
		exit script
	)

	if (keypress(left key)) then (
		setSliceVisible (firstChild (first child (slice child (lookupSlice (sli:enemygrid), sel))), false)

		if (sel > 0) then (if (readstat(sel+3, stat:HP)<>0) then (sel -= 1))

		if (readstat(sel+3, stat:HP)==0 && sel > 1) then (
			sel-=2
		)
		if (sel < 0) then (sel := 0)

		setSliceExtra (lookupslice (sli:enemygrid), 0, sel)
		setSliceVisible (firstChild (first child (slice child (lookupSlice (sli:enemygrid), sel))), true)
		exit script
	)
	if(keypress(right key)) then ( 
		setSliceVisible (firstChild (first child (slice child (lookupSlice (sli:enemygrid), sel))), false)
		
		if (sel < enemyCount--1) then (if (readstat(sel+5, stat:HP)<>0)then(sel += 1))

		if (sel < enemyCount--2) then (
			if (readstat(sel+5, stat:HP)==0) then (sel+=2)
		)
		if (sel > enemyCount--1) then (sel := enemyCount--1)

		setSliceExtra (lookupslice (sli:enemygrid), 0, sel) 

		sli := slice child (lookupslice (sli:enemygrid), sel)
		setSliceVisible (firstChild (first child (slice child (lookupSlice (sli:enemygrid), sel))), true)
		exit script
	)
end