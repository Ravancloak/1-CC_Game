plotscript, battle, formation, begin
	variable (i, var, counter, sli)
	initBattle(1)
	battle:win := 2
	while (battle:win==2) do (
		battleLoopHandler
	)
	subscript, battleLoopHandler, begin
		counter := herocount

		sli := get array(array:battletimers)
		#go through heroes
		for (i, 0, herocount--1) do (
			battle:turn := 0
			if (readStat(i,stat:HP)>0) then (
				var := getElement(sli, i+1)
				var -= readStat(i,stat:Speed)
				if (var<0) then (
					battle:turn := i
					battleMenu(i)
					turns
					var := random(1000, 1000 -- readStat(i,stat:Speed)/2)
					specwait (1)
				)
				setElement (sli, i+1, var)
			)
		)

		#go through enemies
		for (i, 4, enemycount+3) do (
			if (readStat(i,stat:HP)>0) then (
				var := getElement(sli, i+1)
				var -= readStat(i,stat:Speed)
				if (var<0) then (
					enemyturn(i)
					var := random(1000, 1000 -- readStat(i,stat:Speed)/2)
					show value (i)
					turns
					specwait (1)
				)
				
				setElement (sli, i+1, var)
			)
		)
	end

	battleEnd(battle:win)
end

#=======================================================================
#=======================================================================

script, battleMenu, which, begin
	variable (sli, var, sel, who)
	battle:bkey := bkey:action

	#position and show slice
	switch (herocount) do (
		case (1, 3) do(
			#sli := lookupslice (sli:actionmenu)
			#put slice (sli, battle:turn*86+40, sliceY(sli))
			#sli := last child (lookupslice (sli:hideactionmenu))
			#put slice (sli, battle:turn*86+34, sliceY(sli))		
		)
		case (2,4) do(
			#sli := lookupslice (sli:actionmenu)
			#put slice (sli, battle:turn*65+20, sliceY(sli))
			#sli := last child (lookupslice (sli:hideactionmenu))
			#put slice (sli, battle:turn*65+14, sliceY(sli))
		)
	)

	who := hero by slot (which)

	#create text for menu

	#get attack based on equip
	get hero name (2, who)
	switch (check equipment (who, slot:weapon)) do (
		case (item:Nothing) do (
			switch (who) do (
				case (hero:Keifer) do ($2="punch")
				case (hero:Jenkins) do ($2="splash")
				case (hero:GMoney) do ($2="punch")
				case (hero:Jane) do ($2="slap")
			)
		)
	)
	addText(battlemenu:attack)
	$2="skill"
	addText(battlemenu:skill)
	$2="item"
	addText(battlemenu:item)
	$2="defend"
	addtext(battlemenu:defend)
	$2="run"
	addText(battlemenu:run)


	sel := battlemenu:attack

	set slice extra (lookupslice (sli:actionmenu), 0, sel)

	#set text to flash
	sli := slice child (lookupslice (sli:actionmenu), sel)
	set slice lookup(sli, sli:selected text)

	sli := battlePortrait(which)

	slice to back (sli)
	dissolve sprite (sli, dissolve:sink into ground, 10) 
	specwait(9)
	slice to front (sli)

	set slice visible (sli, false)

	specwait(20)
	set slice visible (lookupslice (sli:hideactionmenu), true)

	sli := last child (lookupslice (sli:hideactionmenu))
	replaceportraitsprite (sli, get hero picture (who, hero portrait))
	slice to back (sli)
	dissolve sprite (sli, dissolve:sink into ground, 10, 0, true) 

	specwait(15)
	slice to front (sli)

	game:mode := mode:battle
	while (game:mode == mode:battle) do (
		specwait
	)

	exitBattleMenu
	writeStat(which, stat:defending, false)
	switch (battle:bkey) do (
		case (bkey:targatk) do (
			opentarget(which)
		)
		case (bkey:defend) do (
			writeStat(which, stat:defending, true)
		)
		case (bkey:run) do (
			exit script
		)
	)

	subscript, addText, extra, begin
		sli := create text
		set slice text (sli, 2)
		realign slice (sli, edge:center, edge:top, edge:center, edge:top)
		set outline(sli, true)
		set text color(sli, ui:menuitem)
		set slice extra (sli, 0, extra)
		set parent (sli, lookupslice (sli:actionmenu))
		set slice y (sli, slice child index (sli)*10)
		sli := lookupslice (sli:actionmenu)
		set slice height (sli, slice height(sli)+10)
	end

	subscript, exitBattleMenu, begin
		#hide slice and resume battle shit
		sli := last child (lookupslice (sli:hideactionmenu))
		slice to back (sli)
		dissolve sprite (sli, dissolve:sink into ground, 10) 
		specwait(9)
		slice to front (sli)

		sli := lookupslice (sli:actionmenu)
		set slice height (sli, 8)
		free slice children (sli)
		set slice visible (lookupslice (sli:hideactionmenu), false)
		specwait (10)

		sli := battlePortrait(which)
		set slice visible (sli, true)
		slice to back (sli)
		dissolve sprite (sli, dissolve:sink into ground, 10, 0, true) 

		specwait(15)
		slice to front (sli)
	end
end

script, opentarget, which, begin
	variable (sli, var, sel, who, i)
	sli := lookupslice (sli:actionmenu)
	sel := getSliceExtra (sli, 0)

	switch (sel) do (
		case (battlemenu:attack) do (
			initTargatk
		)
	)

	game:mode := mode:battle
	while (game:mode == mode:battle) do (
		specwait
	)
	if (battle:bkey == bkey:action) then (
		exitSelect
		BattleMenu(which)
		exit script
	)

	sli := lookupslice (sli:enemygrid)
	sel := getSliceExtra (sli, 0)
	exitSelect()

	subscript, exitSelect, begin
		#hide target marker
		setSliceVisible (firstChild (first child (slice child (lookupSlice (sli:enemygrid), sel))), false)
	end

	subscript, initTargatk, begin
		variable (sli, var, sel, who)

		#reset the selected one
		sli := lookupslice (sli:enemygrid)
		sel := getSliceExtra (sli, 0)
		if (readstat(sel+4, stat:HP)<=0) then (sel := 0)
		
		#set slice extra (sli, 0, sel)
		for (i, 4, 4+enemycount--1) do (
			if (readstat(sel+4, stat:HP)<=0) then (sel += 1)
			else (break)
		)

		#set extra and slice visible of the target marker
		setSliceExtra (lookupslice (sli:enemygrid), 0, sel)
		setSliceVisible (firstChild (first child (slice child (lookupSlice (sli:enemygrid), sel))), true)

		battle:bkey := bkey:targatk
	end
end

#=======================================================================
#=======================================================================

script, enemyturn, who, begin
	variable (target)
	while (true) do (
		target := random (0, herocount--1)
		if (readstat(target, stat:HP)>0) then (break)
	)
	
	addattack (attack:normal, who, target)
end

#=======================================================================
#=======================================================================

script, battlecheck, begin
	variable (var, var2, sli, counter, i)

	#check for all characters dead or all enemies dead
	switch (herocount) do (
		case (1) do (
			if (readStat(0, stat:HP)==0) then (battle:win := 1)
		)
		case (2) do (
			if (
				readStat(0, stat:HP)==0&&readStat(1, stat:HP)==0
			) then (battle:win := 1)
		)
		case (3) do (
			if (
				readStat(0, stat:HP)==0&&readStat(1, stat:HP)==0&&
				readStat(2, stat:HP)==0
			) then (battle:win := 1)
		)
		case (4) do (
			if (
				readStat(0, stat:HP)==0&&readStat(1, stat:HP)==0&&
				readStat(2, stat:HP)==0&&readStat(3, stat:HP)==0
			) then (battle:win := 0)
		)
	) 

	switch (enemycount) do (
		case (1) do (
			if (readStat(4, stat:HP)==0) then (battle:win := 1)
		)
		case (2) do (
			if (
				readStat(4, stat:HP)==0&&readStat(5, stat:HP)==0
			) then (battle:win := 1)
		)
		case (3) do (
			if (
				readStat(4, stat:HP)==0&&readStat(5, stat:HP)==0&&
				readStat(6, stat:HP)==0
			) then (battle:win := 1)
		)
		case (4) do (
			if (
				readStat(4, stat:HP)==0&&readStat(5, stat:HP)==0&&
				readStat(6, stat:HP)==0&&readStat(7, stat:HP)==0
			) then (battle:win := 1)
		)
	) 

end

#=======================================================================
#=======================================================================

script, addattack, which, who, target, begin
	variable (speed, sli)

	speed := readstat(who,stat:Speed)

	sli := initArray()
	setParent (sli, lookupslice(array:turn))
	setSortOrder (sli, 8000--speed + random(0,speed/20))

	append (sli, which)
	append (sli, who)
	append (sli, target)
end

script, removeattack, begin
	variable (sli)

	sli := lookupslice(array:turn)
	sli := last child (sli)
	free slice (sli)
end

#=======================================================================
#=======================================================================

script, initTurnArray, begin
	variable (sli, i)
	clear(lookupslice(array:turn))
end

script, herocount, begin
	return (getElement(get array(array:battleinfo), battle:herocount))
end

script, enemycount, begin
	return (getElement(get array(array:battleinfo), battle:enemycount))
end

#stats are 0-3 for heroes, 4-7 for enemies.
script, readStat, who, stat, begin
	return (getElement (slicechild(lookupslice(array:stats), who), stat))
end

script, writestat, who, stat, amount, begin
	return (setElement (slicechild(lookupslice(array:stats), who), stat, amount))
end

#=======================================================================
#=======================================================================