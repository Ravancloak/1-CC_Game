plotscript, battle, formation, begin
	variable (i, var, counter, sli)
	initBattle(1)
	battle:win := 2
	while (battle:win==2) do (
		battleLoopHandler
	)
	subscript, battleLoopHandler, begin
		counter := herocount

		sli := get array(array:battletimers)
		#go through heroes
		for (i, 0, counter--1) do (
			battle:turn := 0
			var := getElement(sli, i+1)
			var -= readStat(i,stat:Speed)
			if (var<0) then (
				battle:turn := i
				battleMenu(i)
				turns
				var := random(600, 1000)
			)
			setElement (sli, i+1, var)
		)
		#go through enemies
		for (i, 4, 7) do (
			battle:turn := 0
			var := getElement(sli, i+1)
			var -= readStat(i,stat:Speed)
			if (var<0) then (
				battle:turn := i
				var := random(600, 1000)
			)
			
			setElement (sli, i+1, var)
		)
	end

	battleEnd(battle:win)
end

script, battleMenu, which, begin
	variable (sli, var, sel, who)
	battle:bkey := bkey:action

	#position and show slice
	var := getElement(get array(array:battleinfo), battle:herocount)
	sli := lookupslice (sli:actionmenu)

	switch (var) do (
		case (1, 3) do(
			put slice (sli, battle:turn*86+40, sliceY(sli))		
		)
		case (2,4) do(
			put slice (sli, battle:turn*65+20, sliceY(sli))
		)
	)

	who := hero by slot (which)

	switch (who) do (
		case (hero:Keifer) do (
			#create text for menu
			$2="stab"
			addText(battlemenu:attack)
			$2="skill"
			addText(battlemenu:skill)
			$2="item"
			addText(battlemenu:item)
			$2="run"
			addText(battlemenu:run)
		)
		case (hero:Jenkins) do (
			#create text for menu
			$2="splash"
			addText(battlemenu:attack)
			$2="skill"
			addText(battlemenu:skill)
			$2="item"
			addText(battlemenu:item)
			$2="run"
			addText(battlemenu:run)
		)
		case (hero:GMoney) do (
			#create text for menu
			$2="punch"
			addText(battlemenu:attack)
			$2="skill"
			addText(battlemenu:skill)
			$2="item"
			addText(battlemenu:item)
			$2="run"
			addText(battlemenu:run)
		)
		case (hero:Daisy) do (
			#create text for menu
			$2="slap"
			addText(battlemenu:attack)
			$2="skill"
			addText(battlemenu:skill)
			$2="item"
			addText(battlemenu:item)
			$2="run"
			addText(battlemenu:run)
		)
	)

	sli := lookupslice (sli:actionmenu)
	set slice visible (sli, true)
	set slice extra (sli, 0, sel)

	#set text to flash
	sli := slice child (sli, sel)
	set slice lookup(sli, sli:selected text)

	specwait(8)

	game:mode := mode:battle
	while (game:mode == mode:battle) do (
		specwait
	)

	exitBattleMenu

	switch (battle:bkey) do (
		case (bkey:targatk) do (
			opentarget(which)
		)
		case (bkey:run) do (
			exit script
		)
	)

	subscript, addText, extra, begin
		sli := create text
		set slice text (sli, 2)
		set outline(sli, true)
		set text color(sli, ui:menuitem)
		set slice extra (sli, 0, extra)
		set parent (sli, lookupslice (sli:actionmenu))
		set slice y (sli, slice child index (sli)*10)
		sli := lookupslice (sli:actionmenu)
		set slice height (sli, slice height(sli)+10)
	end

	subscript, exitBattleMenu, begin
		#hide slice and resume battle shit
		sli := lookupslice (sli:actionmenu)
		set slice height (sli, 8)
		free slice children (sli)
		set slice visible (sli, false)
		specwait (10)
	end
end

script, opentarget, which, begin
	variable (sli, var, sel, who)
	sli := lookupslice (sli:actionmenu)
	sel := getSliceExtra (sli, 0)

	switch (sel) do (
		case (0) do (
			initTargatk
		)
	)

	game:mode := mode:battle
	while (game:mode == mode:battle) do (
		specwait
	)
	if (battle:bkey == bkey:action) then (
		exitSelect
		BattleMenu(which)
		exit script
	)

	sli := lookupslice (sli:enemygrid)
	sel := getSliceExtra (sli, 0)
	exitSelect()

	subscript, exitSelect, begin
		setSliceVisible (firstChild (first child (slice child (lookupSlice (sli:enemygrid), sel))), false)

		setSliceExtra (lookupslice (sli:enemygrid), 0, 0)
	end

	subscript, initTargatk, begin
		variable (sli, var, sel, ext, who)

		var := getElement(get array(array:battleinfo), battle:enemycount)
		if (var < 3) then (ext := 1)
		sli := lookupslice (sli:enemygrid)
		set slice extra (sli, 0, sel)

		sel := ext
		setSliceVisible (firstChild (first child (slice child (lookupSlice (sli:enemygrid), sel))), true)

		battle:bkey := bkey:targatk
	end
end

script, turns, begin
	variable (which, who, target, mod1, mod2, targstat, extdam, sli, type, healing, damage, i, var)
	sli := lookupslice(array:turn)
	sortChildren (sli)

	while (firstChild (lookupslice(array:turn))) do (
		sli := firstChild (lookupslice(array:turn))
		which		:= getElement(sli, 0)
		who			:= getElement(sli, 1)
		target		:= getElement(sli, 2)

		switch (which) do (
			case (attack:normal) do (
				mod1 := readStat (who, stat:Atk)
				mod2 := readStat (target, stat:Def)
				targstat := stat:curHP
				type := battle:normalDamage
				extdam := 0
				healing := 1
			)
		)

		damage	:= returndamage (mod1, mod2, extdam, type, healing)
		if (healing == 1 && readStat(target, stat:row)==1) then (
			damage := damage -- damage/3
		)
		writeStat (target, targstat, readStat(target, targstat) -- damage)
		if (readStat(target, targstat)<0) then(writeStat (target, targstat, 0))

		
		animation(which, target, damage)
		specwait (120)

		if (readstat(target,stat:curHP)==0) then (koTarget(target))
		battlecheck

		freeSlice (firstChild (lookupslice(array:turn)))
	)
	initTurnArray()
	specwait (10)

	subscript, koTarget, targ, begin
		writeStat (who, stat:KOtag, true)
		if (targ>3) then (
			targ -=4
			sli := first child (slice child (lookupslice(sli:enemygrid), targ))
			dissolveSprite (sli, dissolve:puff, 80)
			specwait (70)
			set slice visible (sli, false)
		)
	end
end

script, battlecheck, begin
	variable (var, var2, sli, counter, i)

	#check for all characters dead or all enemies dead
	counter := herocount
	var2 := 0
	

	counter := getElement(get array(array:battleinfo), battle:enemycount)
	if (counter==1) then (
		if (readStat(4, stat:KOtag)==true) then (battle:win := 1)
	)
	if (counter==2) then (
		if (
			readStat(4, stat:KOtag)==true&&readStat(5, stat:KOtag)==true
		) then (battle:win := 1)
	)
	if (counter==3) then (
		if (
			readStat(4, stat:KOtag)==true&&readStat(5, stat:KOtag)==true&&
			readStat(6, stat:KOtag)==true
		) then (battle:win := 1)
	)
	if (counter==4) then (
		if (
			readStat(4, stat:KOtag)==true&&readStat(5, stat:KOtag)==true&&
			readStat(6, stat:KOtag)==true&&readStat(7, stat:KOtag)==true
		) then (battle:win := 1)
	) 
end

script, animation, which, target, damage, sli=0, sli2=0, i=0, speed=0, max=0, begin
	#setup to animate
	if (i == 0) then (
		if (target < 4) then (
			sli := slice child(lookupslice(sli:herogrid), target)
		) else (
			sli := sliceChild(lookupslice(sli:enemygrid), target--4)
		)
		setupanimation (which, target)
		switch (which) do (
			case (attack:normal) do (max := 4)
		)
	#end animation
	) elseif (i > max) then (
		endanimation(which, sli, damage, target)
		exit script
	) else (
		animating(which, sli, i)
	)

	i += 1
	setTimer(timer:battleani, speed, 1, @animation)
	set timer args (timer:battleani, which, target, damage, sli, sli2, i, speed, max)
end