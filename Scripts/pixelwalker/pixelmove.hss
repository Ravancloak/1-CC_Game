# Pixel-Walker v2.3
# by Kiefer Nemeth

# main.hss


#include, pixelwalker/object.hss
#include, pixelwalker/physics.hss
#include, pixelwalker/animate.hss
#include, pixelwalker/npc.hss
#include, pixelwalker/util.hss

globalVariable, begin
	400,player				# Slice handle for party leader
	401,wantUp				# Directional constants for keypresses
	402,wantDown			  # ^
	403,wantLeft			  # ^
	404,wantRight			 # ^
	405,wantUse			   # Whether use button being pressed
end

# Hitbox Constants:
# You can customize the hitbox of your player
define constant(14, player:width)
define constant(18, player:height)
# Default size for NPC hitboxes. Can be overridden on a per-ID basis in npc.hss
define constant(18, default:width)
define constant(18, default:height)

# These constants affect the dimensions of the hitbox *in front* of the player,
# which determines NPC interaction capability
define constant(15, talkbox:width) # perpendicular to player's direction
define constant(18, talkbox:height) # parallel to player's direction

# These thresholds determine how far the player must overlap with a stepon npc before it's activated
define constant(50, default:steponthreshold)

# Physics constants:
# Default movespeed of the player/party leader
# Note: Diagonal speed will be 75% of the movespeed, rounded down. 
define constant(4,default:movespeed)
# Player's weight and NPCs' weights will determine the outcome of the player's collision
# with Pushability-enabled NPCs. 
# Higher number means a heavier object. Objects heavier or as heavy as the player cannot be 
# pushed. Lighter objects can be pushed and will slow movement based on the difference in weight
define constant(10,player:weight)
define constant(5,default:weight)
# 
define constant(1,default:accel)
define constant(6,default:friction) # friction applied when moving against walls
# 
define constant(1000, sli:collisions) # slice that tracks which objects have been checked for collision on the current tick
#
define constant(10,default:caterpillarDelay)

# Animation constants:
# How many ticks hero/NPC animations wait before cycling to the next walkabout frame
define constant(2,default:animspeed)
# The number of frames of the player's walkabout animation
define constant(2, player:framecount)
# Party leader's idle animation starting set
define constant(-1, player:idleSet)
define constant(0, player:idleFrames) # idle framecount

# Timer IDs for ease of access
define constant(0, timer:interact)

# Debug Constants
defineConstant(1000,sli:tracker) # for tracking object movement via rect slices
defineConstant(99,str:debug)
defineConstant(15,timer:debug)

script, initialize, begin
	variable (sli)
	suspendPlayer
	suspendNPCs
	
	sli := getHeroSlice(me)
	
	cameraFollowsSlice(sli)
	
	sli := create container (player:width,player:height)
	set parent (sli, getHeroSlice(me))
end

script, updatePixelMove, begin
	variable(
		x
		y
	
		horiz
		vert
	
		distMoved
		zone
		cd

		var
		runcheck
		sli
	)
	
	player := getHeroSlice(0)
	cameraFollowsSlice(player)
	
	# 1. Doors
			
	# 2. FoeMap
			
	# 3. Interactions

	# 4. Move Player
	if(wantLeft) then(horiz := -1)
	else if(wantRight) then(horiz := 1)
	else(horiz := 0)

	if(wantUp) then(vert := -1)
	else if(wantDown) then(vert := 1)
	else(vert := 0)


	sli := first child (getHeroSlice(me))


	#move leader
	var := getLeadDirection(horiz,vert)
	if (var <> -1) then (
		set hero direction (me, var)

		if (game:tick,mod,10==0) then (
			if (hero frame(me)==0) then (
				set hero frame (me, 1)
			) else (
				set hero frame (me, 0)
			)
		)
	) else (set hero frame (me, 0))

	if (keyispressedB) then (vert := vert*2, horiz := horiz*2)


	put hero (me, hero pixel X (me)+horiz, hero pixel y (me)+vert)


	# 6. Move NPCs

	
	# Reset Input Values
	wantLeft	:= false
	wantRight   := false
	wantUp	  := false
	wantDown	:= false
	wantUse	 := false
end

script, getLeadDirection,x,y, begin
	if (x==0) then (
		if (y == 1) then (return(down))
		else if (y == -1)then (return(up))
		else (exit returning(-1))
	)
	if (x==1) then (
		return(right)
	)
	if (x==-1) then (
		return(left)
	)
end
