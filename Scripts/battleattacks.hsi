define constant, begin

	#values for below items
	1, damage:normal
	2, damage:pure

	12,	ticks:default

	0,	targClass:foeNotDead
	1,	targclass:allyNotDead
	2,	targclass:self
	3,	targclass:allNotDead
	4,	targclass:deadAlly

	0,	targSetting:focus
	1,	targSetting:spread

	0,	preferTarg:random
	1,	preferTarg:strongest
	2,	preferTarg:weakest

	12, weakStrongStat:targetstat

	1,	status:poison
	2,	status:paralyze
	3,	status:confused
	4,	status:burnt
	5,	status:frozen
	6,	status:mute
	7,	status:stun
	8,	status:regen
	9,	status:invincible
	10, status:shell
	11, status:reflect
end
#=======================================================================
#=======================================================================

script, heroturn, who, begin
	variable(sli, which, target, var, sel, i, last target, first target)
	sli := create container
	#set slice lookup (sli, array:action)

	battleMenu

	returnSkill(which)
	sli := lookupslice (array:readskill)

	turnattack (who, target, which)

	subscript, addText, extra, begin
		sli := create text
		set slice text (sli, 2)
		realign slice (sli, edge:center, edge:top, edge:center, edge:top)
		set outline(sli, true)
		set text color(sli, ui:menuitem)
		set slice extra (sli, 0, extra)
		set parent (sli, lookupslice (sli:actionmenu))
		set slice y (sli, slice child index (sli)*10)
		sli := lookupslice (sli:actionmenu)
		set slice height (sli, slice height(sli)+10)
	end

	subscript, battleMenu, begin
		sel := 0
		openbattleMenu
		while (true) do (
			waitForAnyKey()
			if (battlemenukeyress) then (break)
			wait
		)
		switch (sel) do (
			case (0) do (
				which := 1
				exitBattleMenu()
				targetMenu
			)
			case (1) do (
				which := 2
				exitBattleMenu()
				targetMenu
			)
		)
	end

	subscript, openbattlemenu, begin
		#create text for menu
		var := hero by slot (who)
		#get attack based on equip
		get hero name (2, var)

		sli := lookupslice (sli:actionmenu)
		set slice height (sli, 8)
		free slice children (sli)

		switch (check equipment (var, slot:weapon)) do (
			case (item:Nothing) do (
				switch (var) do (
					case (hero:Keifer) do ($2="punch")
					case (hero:Jenkins) do ($2="splash")
					case (hero:GMoney) do ($2="punch")
					case (hero:Jane) do ($2="slap")
				)
			)
		)
		addText(battlemenu:attack)
		$2="skill"
		addText(battlemenu:skill)
		$2="item"
		addText(battlemenu:item)
		$2="defend"
		addtext(battlemenu:defend)
		$2="run"
		addText(battlemenu:run)

		sel := battlemenu:attack

		#set text to flash
		sli := slice child (lookupslice (sli:actionmenu), sel)
		set slice lookup(sli, sli:selected text)

		sli := battlePortrait(who)
		if (GetsliceVisible(sli)) then (
			sliceToBack (sli)
			dissolveSprite (sli, dissolve:sink into ground, 10) 
			specwait(9)
			sliceToFront (sli)
			setSliceVisible (sli, false)

			specwait(20)

			set slice visible (lookupslice (sli:hideactionmenu), true)

			sli := last child (lookupslice (sli:hideactionmenu))
			replaceportraitsprite (sli, var)
			slice to back (sli)
			dissolve sprite (sli, dissolve:sink into ground, 10, 0, true) 

			specwait(15)
			slice to front (sli)
		) else (
			set slice visible (lookupslice (sli:hideactionmenu), true)
		)
	end

	subscript, battlemenukeyress, begin
		if (keypressA) then (
			exitReturning(true)
		)

		if (keypressUp) then (
			sli := slice child (lookupslice (sli:actionmenu), sel)
			setSliceLookup(sli, 0)
			setTextColor(sli, ui:menuitem)

			if (sel > battlemenu:attack) then (sel -= 1) else (sel := (child count(lookupslice (sli:actionmenu)))--1)

			sli := slice child (lookupslice (sli:actionmenu), sel)
			setSliceLookup(sli, sli:selected text)
			exit script
		)
		if(keypressDown) then (
			sli := slice child (lookupslice (sli:actionmenu), sel)
			setSliceLookup(sli, 0)
			setTextColor(sli, ui:menuitem)

			if (sel <(child count(lookupslice (sli:actionmenu)))--1) then (sel += 1) else (sel := 0)

			sli := slice child (lookupslice (sli:actionmenu), sel)
			setSliceLookup(sli, sli:selected text)
			exit script
		)
	end

	subscript, exitBattleMenu, begin
		#hide slice and resume battle shit
		#if (sel <> battlemenu:skill) then (
			sli := last child (lookupslice (sli:hideactionmenu))
			slice to back (sli)
			dissolve sprite (sli, dissolve:sink into ground, 10) 
			specwait(9)
			slice to front (sli)
		#)
		
		sli := lookupslice (sli:actionmenu)
		set slice height (sli, 8)
		free slice children (sli)
		set slice visible (lookupslice (sli:hideactionmenu), false)

		#if (sel <> battlemenu:skill) then (
			specwait (10)
			sli := battlePortrait(who)
			set slice visible (sli, true)
			slice to back (sli)
			dissolve sprite (sli, dissolve:sink into ground, 10, 0, true)
			specwait(15)
			slice to front (sli)
		#)
		writeStat(who, stat:defending, false)
	end

	subscript, targetMenu, begin
		target := 0
		openTargetMenu

		while (true) do (
			waitForAnyKey()
			if (targetMenuKeypress<0) then (
				break
			)
			wait
		)
		if (target <> -9) then (exitTargetMenu(), specwait (16)) else (exitTargetMenu(), battleMenu)	
	end

	subscript, openTargetMenu, begin
		returnSkill(which)

		switch (getElement (lookupslice (array:readskill), skill:targClass)) do (
			case (targClass:foeNotDead) do (
				target := 4
				for (i, 0, 3) do (
					if (readstat(target, stat:HP)<=0) then (target += 1) else (break)
				)
			)
			case (targclass:allyNotDead) do (
				target := 0
				for (i, 0, 3) do (
					if (readstat(target, stat:HP)<=0) then (target += 1) else (break)
				)
			)
			#case (targclass:allNotDead) do ()
			#case (targclass:self) do ()
			#case (targclass:deadAlly) do ()	
		)
		show value (target)
		set slice lookup (getBattleSprite(target), sli:selected target)
	end

	subscript, targetMenuKeypress, begin
		switch (getElement (lookupslice (array:readskill), skill:targClass)) do (
			case (targClass:foeNotDead) do (
				first target := 4
				for (i, 0, 3) do (
					if (readstat(first target, stat:HP)<=0) then (first target += 1) else (break)
				)
				last target := 7
				for (i, 0, 3) do (
					if (readstat(last target, stat:HP)<=0) then (last target -= 1) else (break)
				)
				if (keypressLeft) then (
					if (target > first target) then (target -= 1)
					if (readstat(target, stat:HP)<=0) then (
						if (target > first target) then (target-=1)
						if (readstat(target, stat:HP)<=0) then (
							if (target > first target) then (target-=1)
						)
					)
					if (target < first target) then (
						target := first target
					)
					updateTarget
					exit script
				)
				if (keypressRight) then (
					if (target < last target) then (target += 1)
					if (readstat(target, stat:HP)<=0) then (
						if (target < last target) then (target+=1)
						if (readstat(target, stat:HP)<=0) then (
							if (target < last target) then (target+=1)
						)
					)
					if (target > last target) then (
						target := last target
					)
					updateTarget
					exit script
				)
				if (keypressA) then (
					exitReturning(-1)
				)
				if (keypressB) then (
					target := -9
					exitReturning(-1)
				)
			)
			case (targclass:allyNotDead) do (
				first target := 0
				for (i, 0, 3) do (
					if (readstat(first target, stat:HP)<=0) then (first target += 1) else (break)
				)
				last target := 3
				for (i, 0, 3) do (
					if (readstat(last target, stat:HP)<=0) then (last target -= 1) else (break)
				)
				if (keypressLeft) then (
					if (target > first target) then (target -= 1)
					if (readstat(target, stat:HP)<=0) then (
						if (target > first target) then (target-=1)
						if (readstat(target, stat:HP)<=0) then (
							if (target > first target) then (target-=1)
						)
					)
					if (target < first target) then (
						target := first target
					)
					updateTarget
					exit script
				)
				if (keypressRight) then (
					if (target < last target) then (target += 1)
					if (readstat(target, stat:HP)<=0) then (
						if (target < last target) then (target+=1)
						if (readstat(target, stat:HP)<=0) then (
							if (target < last target) then (target+=1)
						)
					)
					if (target > last target) then (
						target := last target
					)
					updateTarget
					exit script
				)
				if (keypressA) then (
					exitReturning(-1)
				)
			)
			#case (targclass:allNotDead) do ()
			#case (targclass:self) do ()
			#case (targclass:deadAlly) do ()	
		)
	end

	subscript, updateTarget, begin
		if (lookup slice (sli:selected target)) then (
			set slice visible (lookup slice (sli:selected target), true)
			set slice lookup (lookup slice (sli:selected target), false)
		)
		set slice lookup (getBattleSprite(target), sli:selected target)
		show value (target)
	end

	subscript, exitTargetMenu, begin
		if (lookup slice (sli:selected target)) then (
			sli := lookupslice (sli:selected target)
			setSliceVisible (sli, true)
			set slice lookup (sli, false)
		)
		show no value
	end
end


script, enemyturn, who, begin
	variable(sli, which, target, formation)

	which := getenemyattacks (who)

	returnSkill(which)
	sli := lookupslice (array:readskill)

	switch (getElement (sli, skill:preferTarg)) do (
		case (preferTarg:random) do (
			while (true) do (
				target := random (0, herocount--1)
				if (readstat(target, stat:HP)>0) then (break)
			)
		)
		else (
			while (true) do (
				target := random (0, herocount--1)
				if (readstat(target, stat:HP)>0) then (break)
			)
		)
	)
	turnattack (who, target, which)

	subscript, getenemyattacks, enemy, begin
		variable (normalatk1, normalatk2, normalatk3, normalatk4)
		formation := getElement(get array(array:battleinfo), battle:formation)
		enemy := formationSlotEnemy (formation, enemy--4)
		#show value (enemy)
		switch (enemy) do (
			case (enemy:Rat King) do (
				normalatk1 := skill:normal
				normalatk2 := skill:normal
				normalatk3 := skill:normal
				normalatk4 := skill:normal
			)
			case (enemy:Doll Dancer) do (
				normalatk1 := skill:test
				normalatk2 := skill:test
				normalatk3 := skill:test
				normalatk4 := skill:test
			)
			case (enemy:Mushroom Man) do (
				normalatk1 := skill:normal
				normalatk2 := skill:normal
				normalatk3 := skill:normal
				normalatk4 := skill:normal
			)
			case (enemy:Tentas) do (
				normalatk1 := skill:normal
				normalatk2 := skill:normal
				normalatk3 := skill:normal
				normalatk4 := skill:normal
			)
			else (
				normalatk1 := skill:normal
				normalatk2 := skill:normal
				normalatk3 := skill:normal
				normalatk4 := skill:normal
			)
		)
		switch (random (1, 4)) do (
			case (1) do (return (normalatk1))
			case (2) do (return (normalatk2))
			case (3) do (return (normalatk3))
			case (4) do (return (normalatk4))
		)
	end
end


script, turnattack, who, target, which, begin
	variable (sli, damage, element, var, i)

	sli := lookupslice (array:readskill)

	damage	:= returndamage (
		readStat (who, getElement (sli,skill:baseAtkStat))
		readStat (target, getElement (sli,skill:baseDefStat))
		getElement (sli,skill:extraDamage)
		getElement (sli,skill:damageMath)
	)

	damage := damage * getElement (sli,skill:curebit)

	if (getElement (sli,skill:damageMath)<>damage:pure) then (
		element := readStat (target, stat:NormResist + getElement (sli,skill:elementType))
		#show value (element)
		damage :=  damage*element/100

		switch (readStat (who, getElement (sli,skill:baseAtkStat))) do (
			case (stat:Atk) do (
				if (readStat (sli, stat:reflect)) then (damage := damage/2)
			)
			case (stat:Psi) do (
				if (readStat (sli, stat:shell)) then (damage := damage/2)
			)
		)
		if (readStat(target, stat:defending)==true) then (
			damage := damage -- damage/2
		)
	)

	if (getElement (sli,skill:rowcheck) == true && readStat(target, stat:row)==1) then (
			damage := damage -- damage/4
	)
	
	var := (readstat(target, stat:aim) -- readstat(target, stat:evade))
	var += random(-1 * readstat(target, stat:aim)/8,  readstat(target, stat:aim)/8)

	#if (getElement (sli, skill:nevermiss)) then (var := 0)

	if (var + 100 >= 100) then (
		writeStat (target, getElement (sli,skill:targStat), readStat(target, getElement (sli,skill:targStat)) -- damage)

		if (readStat(target, getElement (sli,skill:targStat))<0) then(writeStat (target, getElement (sli,skill:targStat), 0))

		animation(which, target, damage, who)

	) else (
		animation(-1, target, damage, who)
	)

	if (readstat(target, stat:HP) > readstat(target, stat:maxHP)) then (
		writeStat (target, stat:HP, readstat(target, stat:maxHP))
		show value (readstat(target, stat:maxHP))
	)

	for (i, 0, herocount--1) do (
		setmeter (i, stat:hp)
		setmeter (i, stat:pp)
	)

	if (readstat(target, stat:HP)==0) then (KOTarget(target))
	if (readstat(who, stat:HP)==0) then (KOTarget(who))
	battlecheck

	subscript, koTarget, targ, begin
		if (targ>3) then (
			targ -=4
			sli := first child (slice child (lookupslice(sli:enemygrid), targ))
			dissolveSprite (sli, dissolve:flicker, 22)
			specwait (20)
			set slice visible (sli, false)
		) else (
			updateportrait(targ)
		)
	end
end


#=======================================================================
#=======================================================================

script, animation, which, target, damage, who, begin
	variable (sli, sli2, sli3, i, j, picture, ticks, loop, var, var2, var3)
	#setup to animate
	if (target < 4) then (
		sli := battlePortrait(target)
	) else (
		sli := first child (slice child(lookupslice(sli:enemygrid), target--4))
	)
	if (who > 3) then (
		sli3 := first child (slice child(lookupslice(sli:enemygrid), who--4))
	)


	if (which == -1) then (
		if (who > 3) then (
			var3 := sliceY(sli3)
			setSliceY (sli3, sliceY(sli3)+10)
			specwait(10)
		)
		sli2 := loadSmallEnemySprite(6)
		set parent (sli2, sli)
		for (i, 0, 14) do (
			set slice y (sli2, slicey(sli2)--1)
			specwait (2)
		)
		dissolve sprite (sli2, dissolve:puff, 20)
		for (i, 0, 9) do (
			set slice y (sli2, slicey(sli2)--1)
			specwait (2)
		)
		freeSlice (sli2)

		if (who > 3) then (
			setSliceY (sli3, var3)
		)
		exitScript ()
	)

	sli2 := lookupslice (array:readskill)	
	picture := getElement (sli2,skill:picture)
	ticks	:= getElement (sli2,skill:frameTicks)
	loop 	:= getElement (sli2,skill:loop)
	if (who > 3) then (
		var3 := sliceY(sli3)
		setSliceY (sli3, sliceY(sli3)+10)
		specwait(10)
	)

	if (picture<>0) then (
		sli2	:= loadAttackSprite (picture)
		set parent (sli2, sli)
		center slice (sli2)

		for (j, 0, loop--1) do (
			for (i, 0, 2) do (
				setSpriteFrame (sli2, i)
				specwait(ticks)
			)
		)
		free slice (sli2)
	)
	var := sliceX(sli)
	var2 := 1
	if (get element (lookupslice (array:readskill),skill:curebit) <> -1) then (
		for (j, 0, loop--1) do (
			for (i,5,0,-1) do (
				setSliceX(sli,i*var2)
				var2 := var2 * -1
				specwait(5)
			)
		)
	)
	setSliceX(sli, var)
	if (who > 3) then (
		setSliceY (sli3, var3)
	)
	#end animation
	endanimation(which, sli, damage, target)
end

script, endanimation, which, sli, damage, target, begin
	variable (i, damagesprite)

	variable(sli2, ones, tens, hundreds)

	damagesprite := 1

	if (get element (lookupslice (array:readskill),skill:curebit) == -1) then (
		damage := damage * -1
		damagesprite := 2
	)

	hundreds := modulus(damage/100,10)
	tens := modulus(damage/10,10)
	ones := modulus(damage/1,10)

	if (target < 4) then (
		sli2 := battlePortrait(target)
	) else (
		sli2 := first child (slice child(lookupslice(sli:enemygrid), target--4))
	)

	sli:= createGrid(72, 24, 0, 3)
	set parent (sli, sli2)
	center slice (sli)

	if (hundreds <> 0) then(
		sli2 := load border sprite(damagesprite)
		set parent (sli2, sli)
		set sprite frame (sli2, hundreds+1)
		sli2 := load border sprite(damagesprite)
		set parent (sli2, sli)
		set sprite frame (sli2, tens+1)
		sli2 := load border sprite(damagesprite)
		set parent (sli2, sli)
		set sprite frame (sli2, ones+1)
	) else if (tens <> 0)then (
		sli2 := load border sprite(damagesprite)
		set parent (sli2, sli)
		set sprite frame (sli2, tens+1)
		sli2 := load border sprite(damagesprite)
		set parent (sli2, sli)
		set sprite frame (sli2, ones+1)
	) else(
		sli2 := create container
		set parent (sli2, sli)
		sli2 := load border sprite(damagesprite)
		set parent (sli2, sli)
		set sprite frame (sli2, ones+1)
	)
	for (i, 0, 14) do (
		set slice y (sli, slicey(sli)--1)
		specwait (2)
	)
	sli2 := firstChild(sli)
	while (sli2) do (
		if (slice is sprite (sli2)) then (dissolve sprite (sli2, dissolve:puff, 20))
		sli2 := nextSibling(sli2)
	)
	for (i, 0, 9) do (
		set slice y (sli, slicey(sli)--1)
		specwait (2)
	)
	free slice (sli)
end

script, returndamage, mod1, mod2, extdam, type, begin
	variable (var)

	extdam := extdam+100

	switch (type) do (
		case (damage:normal) do (var := mod1 -- mod2/2)
		case (damage:pure) do (var := mod1)
	)
	#var := var + multdiv (var, extdam, 100)

	if (var < 0) then (var := 0)

	return (var)
end

